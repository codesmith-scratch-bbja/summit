// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Goal {
  id             Int      @id @default(autoincrement())
  title          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  activeUsers    User[]   @relation("activeGoals")
  completedUsers User[]   @relation("completedGoals")
  tasks          Task[]
  trending       Boolean  @default(false)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  activegoals    Goal[]    @relation("activeGoals")
  completedGoals Goal[]    @relation("completedGoals")
  activeTasks    Task[]    @relation("activeTasks")
  completedTasks Task[]    @relation("completedTasks")
  following       User[]    @relation("following")
  followedBy       User[]    @relation("following")
}

model Task {
  id             Int      @id @default(autoincrement())
  title          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  goals          Goal[]
  activeUsers    User[]   @relation("activeTasks")
  completedUsers User[]   @relation("completedTasks")
}

// model TasksInGoals {
//   task      Task    @relation(fields: [taskId], references: [id])
//   taskId    Int
//   goal      Goal    @relation(fields: [goalId], references: [id])
//   goalId    Int
//   completed Boolean @default(false)

//   @@id([taskId, goalId])
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  @default("user")
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
